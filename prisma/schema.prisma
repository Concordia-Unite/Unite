// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model School {
  sid         String               @id @default(cuid())
  name        String
  candidates  CandidateEducation[]
  houseNumber Int
  street      String
  state       String
  zipCode     String
  country     String
}

// Candidate
model Candidate {
  cid               String               @id @default(cuid())
  firstName         String
  lastName          String
  biography         String               @default("")
  profilePictureUrl String               @default("")
  email             String               @unique
  phoneNumber       String
  isMarried         Boolean              @default(true)
  wasRostered       Boolean              @default(false)
  addresses         CandidateAddress[]
  showAddress       Boolean
  attended          CandidateEducation[]
}

model CandidateEducation {
  degree         String
  isGraduated    Boolean
  graduationDate DateTime?
  at             School    @relation(fields: [schoolId], references: [sid])
  schoolId       String
  for            Candidate @relation(fields: [candidateId], references: [cid])
  candidateId    String

  @@id([candidateId, schoolId, isGraduated])
}

model CandidateAddress {
  houseNumber Int
  street      String
  state       String
  zipCode     String
  country     String
  candidate   Candidate @relation(fields: [candidateId], references: [cid], onDelete: Cascade)
  candidateId String

  @@id([houseNumber, street, state, zipCode, country, candidateId])
}

// NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
