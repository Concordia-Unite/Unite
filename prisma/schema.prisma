// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum StateCode {
    NE
    AL
    KY
    OH
    AK
    LA
    OK
    AZ
    ME
    OR
    AR
    MD
    PA
    MA
    CA
    MI
    RI
    CO
    MN
    SC
    CT
    MS
    SD
    DE
    MO
    TN
    DC
    MT
    TX
    FL
    GA
    NV
    UT
    NH
    VT
    HI
    NJ
    VA
    ID
    NM
    IL
    NY
    WA
    IN
    NC
    WV
    IA
    ND
    WI
    KS
    WY
}

enum Region {
    GreatLakes
    GreatPlains
    WestSouthwest
    EastSouthwest
    Central
}

enum Position {
    Deaconess
    DirectorOfChristianEducation
    DirectorOfChristianOutreach
    DirectorOfChurchMinistries
    DirectorOfFamilyLifeMinistries
    DirectorOfParishMusic
    EarlyChildhoodLutheranTeacher
    ElementaryLutheranTeacher
    MiddleLutheranTeacher
    SecondaryLutheranTeacher
    K12LutheranTeacher
    K8LutheranTeacher
    SpecialEducationLutheranTeacher
}

enum ClassroomType {
    Deparmentalized
    SelfContained
    SelfContainedMultiGrade
}

enum MaritialStatus {
    Married
    Single
    Engaged
}

enum SocialSecurityContribution {
    EmployerPaysAll
    EmployerPaysPart
    WorkPaysAll
    Other
}

enum HousingAllowance {
    ResidenceProvided
    SalaryOnly
    SalaryPlusHousingStipend
}

enum HealthCoverage {
    Family
    WorkerOnly
    WorkerAndChildren
}

enum HealthPlan {
    ConcordiaPlan
    None
    Other
}

enum OrganizationType {
    RecognizedServiceOrganization
    School
    ClassicalSchool
    Church
    Association
}

enum JobStatus {
    Pending
    Approved
    Cancelled
    Fulfilled
}

enum Subject {
    Math
    Science
    SocialStudies
    English
    SpecialEducation
    PE
    Technology
    History
    Religion
    HomeEc
    Band
    Choir
    Other
}

enum CallStatus {
    Pending
    WithOrganization
    Declined
    Extended
    Accepted
}

enum AdminType {
    Organization
    Institution
    District
}

enum UserType {
    Candidate
    Admin
    PlacementDirector
    Unknown
}

enum PlacementDirectorType {
    District
    Institution
}

enum Grade {
    Kindergarten
    First
    Second
    Third
    Fourth
    Fifth
    Sixth
    Seventh
    Eighth
    Nineth
    Tenth
    Eleventh
    Twelfth
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionState")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                String             @id @default(cuid())
    name              String?
    email             String?            @unique
    emailVerified     DateTime?
    image             String?
    accounts          Account[]
    sessions          Session[]
    type              UserType           @default(Unknown)
    Candidate         Candidate?
    Admin             Admin?
    PlacementDirector PlacementDirector?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Candidate Model
// This model represents a Rostered or Unrostered LCMS Canidate.
// A Candidate is a person who can accept a call, and is a church worker.
// Some extra data is stored for use in later education.
model Candidate {
    id                String             @id @default(uuid()) @db.Uuid
    user              User               @relation(fields: [userId], references: [id])
    firstName         String             @default("") @db.VarChar(255)
    lastName          String             @default("") @db.VarChar(255)
    biography         String             @default("") @db.Text
    profilePictureUrl String             @default("") @db.VarChar(255)
    email             String             @default("") @db.Text
    phoneNumber       String             @default("+1 (000) 000-0000") @db.VarChar(17)
    maritialStatus    MaritialStatus     @default(Single)
    isRostered        Boolean            @default(false)
    showPhoneNumber   Boolean            @default(false)
    showAddress       Boolean            @default(false)
    addresses         CandidateAddress[]
    attended          Education[]
    calls             Call[]
    userId            String             @unique
    institution       Institution?       @relation(fields: [institutionId], references: [id])
    institutionId     String?            @db.Uuid
    district          District?          @relation(fields: [districtId], references: [id])
    districtId        String?            @db.Uuid
}

// Institution Model
// This represents a CUS School, or any school that outputs valid Candidates
// Each Institution has a set of Admins for maintanence, a set of Placement Directors
// for handling calls, and a set of students which represent current and alumni.
model Institution {
    id                 String              @id @default(uuid()) @db.Uuid
    name               String              @default("") @db.Text
    addressId          String              @unique @db.Uuid
    address            Address             @relation(fields: [addressId], references: [id])
    website            String              @default("") @db.Text
    positions          Position[]
    admins             Admin[]
    placementDirectors PlacementDirector[]
    students           Education[]
    candidates         Candidate[]
}

// District Model
// This represents one of the LCMS 35 districts. Ths is represented
// as a model for two reasons: there are users, and the LCMS can change that
// system. A district mirrors an Institution, as District's hold lists of rostered
// Candidates.
model District {
    id                 String              @id @default(uuid()) @db.Uuid
    name               String              @default("") @db.Text
    region             Region
    addressId          String              @unique @db.Uuid
    address            Address             @relation(fields: [addressId], references: [id])
    admins             Admin[]
    organizations      Organization[]
    placementDirectors PlacementDirector[]
    candidates         Candidate[]
}

// Organization Model
// An organization is any calling body. They have a profile, and
// set of their call requests (called jobs). They also have admins to
// monitor their page. Each Organization is within one district and one region.
model Organization {
    id         String           @id @default(uuid()) @db.Uuid
    name       String           @default("") @db.Text
    region     Region
    type       OrganizationType
    districtId String           @db.Uuid
    district   District         @relation(fields: [districtId], references: [id])
    addressId  String           @unique @db.Uuid
    address    Address          @relation(fields: [addressId], references: [id])
    admins     Admin[]
    jobs       Job[]
}

// Admin Model
// Represents an Organization, District, or Institution Admin. These handle
// adding people to the placement directors, and monitoring new candidates in their area
// as well as new call requests in their area.
model Admin {
    id             String        @id @default(uuid()) @db.Uuid
    institutionId  String?       @db.Uuid
    districtId     String?       @db.Uuid
    organizationId String?       @db.Uuid
    institution    Institution?  @relation(fields: [institutionId], references: [id])
    district       District?     @relation(fields: [districtId], references: [id])
    organization   Organization? @relation(fields: [organizationId], references: [id])
    user           User          @relation(fields: [userId], references: [id])
    userId         String        @unique
    type           AdminType
}

// PlacementDirector Model
// Represents a Placement Director or Coordinator. This position handles the acceptance
// of new call requests and facilitates the call process between an organization and a 
// candidate. Placement Directors have less permissions than Admins.
model PlacementDirector {
    id            String                @id @default(uuid()) @db.Uuid
    email         String                @db.Text
    district      District?             @relation(fields: [districtId], references: [id])
    institution   Institution?          @relation(fields: [institutionId], references: [id])
    districtId    String?               @db.Uuid
    institutionId String?               @db.Uuid
    user          User                  @relation(fields: [userId], references: [id])
    userId        String                @unique
    type          PlacementDirectorType
}

model Job {
    id                    String                     @id @default(uuid()) @db.Uuid
    position              Position
    organization          Organization               @relation(fields: [organizationId], references: [id])
    organizationId        String                     @db.Uuid
    status                JobStatus                  @default(Pending)
    classroom             ClassroomType              @default(Deparmentalized)
    grades                Grade[]
    subjects              Subject[]
    description           String                     @default("") @db.Text
    startDate             DateTime?
    isTenured             Boolean?
    isFullTime            Boolean?
    salary                Decimal                    @db.Money
    socialSecurityContrib SocialSecurityContribution
    housingAllowance      HousingAllowance?
    healthCoverage        HealthCoverage?
    healthPlan            HealthPlan?
    monthsOfService       Int?                       @db.SmallInt
    calls                 Call[]
}

model CandidateAddress {
    id          String    @id @default(uuid()) @db.Uuid
    candidateId String    @db.Uuid
    addressId   String    @db.Uuid
    address     Address   @relation(fields: [addressId], references: [id])
    candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Address {
    id               String             @id @default(uuid()) @db.Uuid
    houseNumber      String             @default("") @db.Text
    street           String             @default("") @db.Text
    state            StateCode          @default(NE)
    zipCode          String             @default("68434") @db.VarChar(5)
    country          String             @default("US") @db.VarChar(3)
    candidateAddress CandidateAddress[]
    institution      Institution?
    district         District?
    organization     Organization?
}

model Education {
    id             String      @id @default(uuid()) @db.Uuid
    degree         String      @default("B.S. Education") @db.Text
    graduationDate DateTime?
    isGraduated    Boolean     @default(false)
    candidate      Candidate   @relation(fields: [candidateId], references: [id])
    institution    Institution @relation(fields: [institutionId], references: [id])
    candidateId    String      @db.Uuid
    institutionId  String      @db.Uuid
}

model Call {
    id          String     @id @default(uuid()) @db.Uuid
    job         Job        @relation(fields: [jobId], references: [id])
    jobId       String     @db.Uuid
    candidate   Candidate  @relation(fields: [candidateId], references: [id])
    candidateId String     @db.Uuid
    status      CallStatus @default(Pending)
}
