// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  candidate     Candidate?
  Admin         Admin[]
  Member        Member[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Candidate {
  id                String      @id @default(uuid()) @db.Uuid
  user              User        @relation(fields: [userId], references: [id])
  userId            String      @unique
  firstName         String      @map("first_name")
  lastName          String      @map("last_name")
  biography         String
  profilePictureUrl String      @map("profile_picture_url")
  email             String
  address           Address     @relation(fields: [addressId], references: [id])
  addressId         String      @map("address_id") @db.Uuid
  isRostered        Boolean     @map("is_rostered")
  university        University? @relation(fields: [universityId], references: [id])
  universityId      String?     @db.Uuid
  district          District?   @relation(fields: [districtId], references: [id])
  districtId        String?     @db.Uuid
  disposedTo        Call[]
}

model University {
  id        String      @id @default(uuid()) @db.Uuid
  name      String
  address   Address     @relation(fields: [addressId], references: [id])
  positions Position[]
  website   String
  admin     Admin       @relation(fields: [adminId], references: [id])
  members   Member[]
  roster    Candidate[]
  addressId String      @db.Uuid
  adminId   String      @unique @db.Uuid
}

model CallingEntity {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  region            Region
  variant           Variant
  address           Address            @relation(fields: [addressId], references: [id])
  admin             Admin              @relation(fields: [adminId], references: [id])
  members           Member[]
  addressId         String             @db.Uuid
  adminId           String             @unique @db.Uuid
  district          District?          @relation(fields: [districtId], references: [id])
  districtId        String?            @db.Uuid
  placementRequests PlacementRequest[]
}

model District {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  address          Address            @relation(fields: [addressId], references: [id])
  website          String
  region           Region
  admin            Admin              @relation(fields: [adminId], references: [id])
  members          Member[]
  entities         CallingEntity[]
  roster           Candidate[]
  addressId        String             @db.Uuid
  adminId          String             @unique @db.Uuid
  PlacementRequest PlacementRequest[]
}

model Admin {
  id            String         @id @default(uuid()) @db.Uuid
  user          User           @relation(fields: [userId], references: [id])
  university    University?
  userId        String
  universityId  String?        @db.Uuid
  callingEntity CallingEntity?
  district      District?
}

model Member {
  id              String         @id @default(uuid()) @db.Uuid
  user            User           @relation(fields: [userId], references: [id])
  university      University?    @relation(fields: [universityId], references: [id])
  userId          String
  universityId    String?        @db.Uuid
  callingEntity   CallingEntity? @relation(fields: [callingEntityId], references: [id])
  callingEntityId String?        @db.Uuid
  district        District?      @relation(fields: [districtId], references: [id])
  districtId      String?        @db.Uuid
}

model PlacementRequest {
  id                         String                     @id @default(uuid()) @db.Uuid
  position                   Position
  callingEntity              CallingEntity              @relation(fields: [callingEntityId], references: [id])
  district                   District                   @relation(fields: [districtId], references: [id])
  status                     PlacementRequestStatus     @default(Pending)
  classroom                  Classroom
  grades                     Grade[]
  subjects                   Subject[]
  description                String
  startDate                  DateTime
  isTenured                  Boolean
  isFullTime                 Boolean
  salary                     Decimal                    @db.Money
  socialSecurityContribution SocialSecurityContribution
  healthCoverage             HealthCoverage?
  healthPlan                 HealthPlan?
  monthsOfService            Int?                       @db.SmallInt
  housingAllowance           HousingAllowance           @relation(fields: [housingAllowanceId], references: [id])
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  callingEntityId            String                     @db.Uuid
  districtId                 String                     @db.Uuid
  housingAllowanceId         String                     @unique @db.Uuid
  interestedCandidates       Call[]
}

model Call {
  id                 String           @id @default(uuid()) @db.Uuid
  placementRequest   PlacementRequest @relation(fields: [placementRequestId], references: [id])
  candidate          Candidate        @relation(fields: [candidateId], references: [id])
  status             CallStatus
  placementRequestId String           @db.Uuid
  candidateId        String           @db.Uuid
}

model Grade {
  id                String             @id @default(uuid()) @db.Uuid
  grade             String
  placementRequests PlacementRequest[]
}

model Subject {
  id                String             @id @default(uuid()) @db.Uuid
  name              String
  placementRequests PlacementRequest[]
}

model HousingAllowance {
  id               String               @id @default(uuid()) @db.Uuid
  type             HousingAllowanceType
  stipend          Decimal?
  placementRequest PlacementRequest?
}

model Address {
  id              String          @id @default(uuid()) @db.Uuid
  houseNumber     String          @map("house_number")
  street          String
  city            String
  state           StateCode
  country         String
  zipCode         String          @map("zip_code")
  candidates      Candidate[]
  universities    University[]
  callingEntities CallingEntity[]
  districts       District[]
}

enum StateCode {
  NE
  AL
  KY
  OH
  AK
  LA
  OK
  AZ
  ME
  OR
  AR
  MD
  PA
  MA
  CA
  MI
  RI
  CO
  MN
  SC
  CT
  MS
  SD
  DE
  MO
  TN
  DC
  MT
  TX
  FL
  GA
  NV
  UT
  NH
  VT
  HI
  NJ
  VA
  ID
  NM
  IL
  NY
  WA
  IN
  NC
  WV
  IA
  ND
  WI
  KS
  WY
}

enum Region {
  Great_Lakes
  Great_Plains
  West_Southwest
  East_Southwest
  Central
}

enum Variant {
  Recognized_Service_Organization
  Elementary_School
  Junior_High_School
  Senior_High_School
  K_12_School
  K_8_School
  Association_of_Schools
  Church
}

enum Classroom {
  Departmentalized
  Self_Contained
  Self_Contained_Multi_Grade
}

enum Position {
  Deaconess
  Lutheran_Teacher
  Director_of_Christian_Education
  Director_of_Parish_Music
  Director_of_Christian_Outreach
  Director_of_Church_Ministries
  Director_of_Family_Life_Ministries
}

enum SocialSecurityContribution {
  Employer_Pays_All
  Employer_Pays_Part
  Worker_Pays_All
}

enum HealthCoverage {
  Worker_and_Children
  Family
  Worker_Only
}

enum HealthPlan {
  Concordia_Plan
  None
  Other
}

enum HousingAllowanceType {
  Salary
  Stipend
  Provided
}

enum PlacementRequestStatus {
  Pending
  Approved
  Denied
  Cancelled
  Fulfilled
}

enum CallStatus {
  Expressed
  Declined
  Extended
  Accepted
}
