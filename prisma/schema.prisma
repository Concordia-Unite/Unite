
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum StateCode {
    NE
    AL
    KY
    OH
    AK
    LA
    OK
    AZ
    ME
    OR
    AR
    MD
    PA
    MA
    CA
    MI
    RI
    CO
    MN
    SC
    CT
    MS
    SD
    DE
    MO
    TN
    DC
    MT
    TX
    FL
    GA
    NV
    UT
    NH
    VT
    HI
    NJ
    VA
    ID
    NM
    IL
    NY
    WA
    IN
    NC
    WV
    IA
    ND
    WI
    KS
    WY
}

enum Region {
    GreatLakes
    GreatPlains
    WestSouthwest
    EastSouthwest
    Central
}

enum Position {
    Deaconess
    DirectorOfChristianEducation
    DirectorOfChristianOutreach
    DirectorOfChurchMinistries
    DirectorOfFamilyLifeMinistries
    DirectorOfParishMusic
    EarlyChildhoodLutheranTeacher
    ElementaryLutheranTeacher
    MiddleLutheranTeacher
    SecondaryLutheranTeacher
    K12LutheranTeacher
    K8LutheranTeacher
    SpecialEducationLutheranTeacher
}

enum Classroom {
    Deparmentalized
    SelfContained
    SelfContainedMultiGrade
}

enum MaritialStatus {
    Married
    Single
    Engaged
}

enum Time {
    FullTime
    PartTime
}

enum Call {
    NonTenured
    Tenured
}

enum SocialSecurityContribution {
    EmployerPaysAll
    EmployerPaysPart
    WorkPaysAll
    Other
}

enum HousingContribution {
    ResidenceProvided
    SalaryOnly
    SalaryPlusHousingStipend
}

enum HealthCoverage {
    Family
    WorkerOnly
    WorkerAndChildren
}

enum HealthPlan {
    ConcordiaPlan
    None
    Other
}

enum AccountType {
    Candidate
    Organization
    Institution
    District
}

model Institution {
    iid           String               @id @default(cuid())
    name          String
    candidates    CandidateEducation[]
    positions     Position[]
    houseNumber   String
    street        String
    state         StateCode
    zipCode       String
    country       String
    PlaceDirector PlaceDirector[]
}

model PlaceDirector {
    pdid           String      @id @default(cuid())
    institution    Institution @relation(fields: [institutionIid], references: [iid])
    institutionIid String
    email          String
}

model District {
    did         String      @id @default(cuid())
    name        String
    states      StateCode[]
    region      Region
    candidates  Candidate[]
    houseNumber String
    street      String
    state       StateCode
    zipCode     String
    country     String
}

// Candidate
model Candidate {
    cid               String               @id @default(cuid())
    firstName         String
    lastName          String
    biography         String               @default("")
    profilePictureUrl String               @default("")
    email             String
    uid               String               @unique
    phoneNumber       String
    maritialStatus    MaritialStatus       @default(Single)
    wasRostered       Boolean              @default(false)
    addresses         CandidateAddress[]
    showAddress       Boolean              @default(false)
    showPhoneNumber   Boolean              @default(false)
    attended          CandidateEducation[]
    District          District?            @relation(fields: [districtDid], references: [did])
    districtDid       String?
}

model CandidateEducation {
    degree         String
    isGraduated    Boolean
    graduationDate DateTime?
    at             Institution @relation(fields: [schoolId], references: [iid])
    schoolId       String
    for            Candidate   @relation(fields: [candidateId], references: [cid])
    candidateId    String

    @@id([candidateId, schoolId, isGraduated])
}

model CandidateAddress {
    houseNumber String
    street      String
    state       StateCode
    zipCode     String
    country     String
    candidate   Candidate @relation(fields: [candidateId], references: [cid], onDelete: Cascade)
    candidateId String

    @@id([houseNumber, street, state, zipCode, country, candidateId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @map("refreshToken") @db.Text
    access_token      String? @map("accessToken") @db.Text
    expires_at        Int?    @map("expiresAt")
    token_type        String? @map("tokenType")
    scope             String?
    id_token          String? @map("idToken") @db.Text
    session_state     String? @map("sessionState")
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    accountType   AccountType @default(Candidate)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
